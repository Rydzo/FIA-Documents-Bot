name: FIA Telegram Bot

on:
  schedule:
    - cron: "*/5 * * * *"   # co 5 minut (UTC)
  workflow_dispatch:

# NIE pozwalaj na równoległe uruchomienia (eliminuje dublowanie przez wyścig)
concurrency:
  group: fia-telegram-bot
  cancel-in-progress: true

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 1) Przywrócenie najświeższego last_seen.txt z cache
      - name: Restore state (last_seen.txt)
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: last_seen.txt
          # nie używamy stałego klucza, tylko prosimy o "najnowszy" z prefiksu state-
          key: state-latest
          restore-keys: |
            state-

      - name: Show restored state
        run: |
          echo "== restored last_seen.txt =="
          if [ -f last_seen.txt ]; then cat last_seen.txt; else echo "(no file)"; fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python FIA_Bot.py
          echo "== after run last_seen.txt =="
          if [ -f last_seen.txt ]; then cat last_seen.txt; else echo "(no file)"; fi

      # 2) Zapis nowej wersji stanu z unikalnym kluczem (najnowszy)
      - name: Save state (last_seen.txt)
        if: always()
        uses: actions/cache/save@v4
        with:
          path: last_seen.txt
          key: state-${{ github.run_id }}
